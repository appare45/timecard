rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 認証済みユーザーか
    function isAuthenticated() {
        return request.auth != null;
    }
    // 自分のIDを持っているか
    function isUserAuthenticated(userId) {
        return isAuthenticated() && userId == request.auth.uid;
    }
    // グループメンバーか
    function isGroupMember(groupId, email) {
      return isAuthenticated() && exists(/databases/$(database)/documents/group/$(groupId)/account/$(email))
    }

    function getMemberId(groupId, email) {
      return get(/databases/$(database)/documents/group/$(groupId)/account/$(email)).data.memberId
    }

    function isAdmin(groupId, email) {
      return isAuthenticated() && isGroupMember(groupId, email) && exists(/databases/$(database)/documents/group/$(groupId)/admin/$(getMemberId(groupId, email)))
    }

    match /{document=**} {
      match /user/{uid} {
        allow get, create, update: if isUserAuthenticated(uid)
      }
      match /group/{groupId} {
        allow get, update: if isGroupMember(groupId, request.auth.token.email)
        allow create: if isAuthenticated()
      }
      match /group/{groupId}/account/{email} {
        allow get, create, update, list: if request.auth.token.email == email || isAdmin(groupId, request.auth.token.email)
        allow delete: if request.auth.token.email != email && isAdmin(groupId, request.auth.token.email)
      }
      match /group/{groupId}/tag/{activity} {
        allow get, list, create, update, delete: if isGroupMember(groupId, request.auth.token.email)
      }
      match /group/{groupId}/activity/{activity} {
        allow get, list, create, update: if isGroupMember(groupId, request.auth.token.email)
      }
      match /group/{groupId}/member/{memberId} {
        allow get, list, create, update: if isGroupMember(groupId, request.auth.token.email)
        allow delete: if isAdmin(groupId, request.auth.token.email)
      }
      match /group/{groupId}/admin/{memberId} {
        allow get, list: if isGroupMember(groupId, request.auth.token.email)
        allow create, delete: if isAdmin(groupId, request.auth.token.email)
      }
      match /invite/{email} {
        allow create, list, delete: if isAuthenticated()
        allow get: if request.auth.token.email == email
      }
    }
  }
}